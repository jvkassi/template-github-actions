---

name: docker-deploy

on:
  workflow_call:

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: self-hosted
    steps:
    - name: Checkout
      uses: actions/checkout@master

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Log in to the Container registry
      uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # Setup buildpacks to build image
    - name: Setup buildpacks
      uses: buildpacks/github-actions/setup-pack@main

    - name: Setup ENV
      run: |
        export ENV=development
        if echo "$GITHUB_REF_NAME" | grep -q "^dev-.*";  then export ENV=development; fi
        if echo "$GITHUB_REF_NAME" | grep -q "^stg-.*";  then export ENV=staging; fi
        if echo "$GITHUB_REF_NAME" | grep -q "^prod-.*"; then export ENV=production; fi
        
        export APP_NAME=`echo ${GITHUB_REPOSITORY#*/} | tr '[:upper:]' '[:lower:]'`
        export APP_NAME="${APP_NAME//_/-}"
        
        export IMAGE_NAME=`echo ghcr.io/${GITHUB_REPOSITORY_OWNER}/${APP_NAME} | tr '[:upper:]' '[:lower:]'`
        
        echo "APP_NAME=${APP_NAME}" >> $GITHUB_ENV
        echo "ENV=${ENV}" >> $GITHUB_ENV
        echo "IMAGE_NAME=${IMAGE_NAME}" >> $GITHUB_ENV

    - uses: actions/setup-node@v3
      with:
        node-version: 14
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm install --force
        chmod +x node_modules/.bin/*
  
    - name: Build 
      run : npm run build:${{ env.ENV }}

    # Build the Docker image
    - name: Build & Publish
      run: |
      
        cat nginx.${{ env.ENV }}.conf
        cp nginx.${{ env.ENV }}.conf nginx.conf 
        
        pack build ${{ env.IMAGE_NAME }} \
        --path . \
        --publish \
        -t  ${{ env.IMAGE_NAME }}:${{ env.ENV }} \
        -t  ${{ env.IMAGE_NAME }}:${GITHUB_REF_NAME} \
        --pull-policy if-not-present \
        -B paketobuildpacks/builder:base \
        -b gcr.io/paketo-buildpacks/nginx 

    # Deploy the Docker image to the GKE cluster
    - name: Deploy
      run: |
      
        export APP_DOMAIN=ovh.syabe-tech.com
        export CNT_NAME=${{ env.ENV }}-${{ env.APP_NAME }}
        TRAEFIK_RULE="Host(\`${{ env.APP_NAME }}-${{ env.ENV }}.${APP_DOMAIN}\`)"

        docker rm -f ${CNT_NAME}
        docker run -d --network proxy --name ${CNT_NAME} \
         -e PORT=80 --label traefik.enable=true \
         --label co.elastic.logs/fileset.stdout=access --label co.elastic.logs/fileset.stderr=error \
         --label co.elastic.logs/module=nginx \
         --label traefik.docker.network=proxy \
         --label traefik.http.routers.${CNT_NAME}.rule=$TRAEFIK_RULE \
         --label traefik.http.routers.${CNT_NAME}.service=${CNT_NAME} \
         --label traefik.http.routers.${CNT_NAME}.entrypoints=http,https \
         --label traefik.http.services.${CNT_NAME}.loadbalancer.server.port=80 \
         --restart always ${{ env.IMAGE_NAME }}:${GITHUB_REF_NAME}

        docker network connect monitoring $CNT_NAME
        docker network connect ${{ env.ENV }}_${{ env.ENV }} $CNT_NAME
  notifications:
    uses: terebei/base-cicd/.github/workflows/notify.yml@main
    needs: setup-build-publish-deploy
